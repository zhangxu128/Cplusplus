//每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//
//注意：给定 n 是一个正整数。
//
//示例 1：
//
//输入： 2
//输出： 2
//解释： 有两种方法可以爬到楼顶。
//1.  1 阶 + 1 阶
//2.  2 阶
//示例 2：
//
//输入： 3
//输出： 3
//解释： 有三种方法可以爬到楼顶。
//1.  1 阶 + 1 阶 + 1 阶
//2.  1 阶 + 2 阶
//3.  2 阶 + 1 阶

#include <iostream>

using namespace std;

//采用动态规划
//不难发现，这个问题可以被分解为一些包含最优子结构的子问题，即它的最优解可以从其子问题的最优解来有效地构建，我们可以使用动态规划来解决这一问题。
//第 ii 阶可以由以下两种方法得到：
//在第(i - 1)(i−1) 阶后向上爬一阶。
//在第(i - 2)(i−2) 阶后向上爬 22 阶。
//所以到达第 ii 阶的方法总数就是到第(i - 1)(i−1) 阶和第(i - 2)(i−2) 阶的方法数之和。
//令 dp[i]dp[i] 表示能到达第 ii 阶的方法总数：
//dp[i] = dp[i - 1] + dp[i - 2]
//dp[i] = dp[i−1] + dp[i−2]
int climbStairs(int n) {
	if (n == 1 || n == 2) {
		return n;
	}
	int* size = new int[n + 1];
	size[1] = 1;
	size[2] = 2;
	for (int i = 3; i <= n; i++) {
		size[i] = size[i - 1] + size[i - 2];
	}
	return size[n];
}

int main(void) {


	int n;
	cin >> n;
	cout << "输入总的台阶数" << endl;
	cout << "共有" << climbStairs(n) << "种走法" << endl;
	system("pause");
	return 0;
}