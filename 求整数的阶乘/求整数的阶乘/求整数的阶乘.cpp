//题目描述
//求任一正整数的阶乘（注意：是任意正整数）
//该正整数不大于1000。
//输入描述 :
//输入一个正整数
//输出描述 :
//输出一个正整数
//示例1
//输入
//3
//输出
//6
//说明
//示例2
//输入
//10
//输出
//3628800

#include <iostream>
#include <string.h>
using namespace std;
int main() {
	int N;
	int s[10000] = { 0 }, i;//用于保存超过int范围的超大数字,按照从个位往上进位的方式更新数据 
							//核心思路：乘法转换成加法    
	//怎么确定完整数字的终点：最高位数字与i的乘积+前一位进位是否产生进位        
	while (cin >> N) {
		memset(s, -1, sizeof(s));//       
		s[0] = 1;//将个位设为1                       
		int i, j, temp, k, index;//k记录进位                
		for (i = 1; i <= N; ++i) {//本轮阶乘的数字           
			k = 0;//进位设置为零                         //遍历结果数组中的每个个位整数           
			for (j = 0; s[j] != -1; ++j) {//-1标识最高位结束               
				temp = s[j] * i + k;
				s[j] = temp % 10;
				k = temp / 10;//下一个数的进位           
			}                         //***********确定完整数字的终点，或者总共数组长度的方法：            //当i乘以当前数组的最高位时，若存在进位则根据当前数组长度递增           
			while (k) {
				s[j] = k % 10;
				++j;
				k /= 10;
			}
			index = j - 1;
		}                 //逆序输出数组中的数字       
		for (i = index; i >= 0; --i)
			cout << s[i];
		cout << endl;
	}
	system("pause");
	return 0;
}